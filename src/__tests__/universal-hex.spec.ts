/**
 * Tests for universal-hex module.
 *
 * (c) 2020 Micro:bit Educational Foundation and contributors.
 * SPDX-License-Identifier: MIT
 */
import * as fs from 'fs';
import { expect, describe, it } from 'vitest';
import * as uh from '../universal-hex';

const hexPath = './src/__tests__/hex-files/';
const hex116 = fs.readFileSync(hexPath + '1-duck-umbrella-16.hex', 'utf8');
const hex216 = fs.readFileSync(hexPath + '2-ghost-music-16.hex', 'utf8');
const hex132 = fs.readFileSync(hexPath + '1-duck-umbrella-32.hex', 'utf8');
const hex232 = fs.readFileSync(hexPath + '2-ghost-music-32.hex', 'utf8');
const hexCombinedBlocks = fs.readFileSync(
  hexPath + 'combined-16-blocks-1-9901-2-9903.hex',
  'utf8'
);
const hexCombinedSections = fs.readFileSync(
  hexPath + 'combined-32-sections-1-9901-2-9903.hex',
  'utf8'
);

describe('Test iHexToCustomFormatBlocks()', () => {
  it('Pads blocks with additional records to reach 512 bytes (16)', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expected =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':10F3900D002070470E207047002803D00A490861ED\n' +
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n' +
      ':020000040003F7\n' +
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0400000BFFFFFFFFF5\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9903);

    expect(result).toEqual(expected);
    expect(result.length).toEqual(512);
  });

  it('Pads blocks with additional records to reach 512 byte boundary (32).', () => {
    const hexStr32 =
      ':020000040000FA\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':020000040003F7\n' +
      ':203F40006A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C6C\n';
    const expected32 =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':020000040003F7\n' +
      ':203F400D6A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C5F\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const result32 = uh.iHexToCustomFormatBlocks(hexStr32, 0x9903);

    expect(result32).toEqual(expected32);
    expect(result32.length).toEqual(512);
  });

  it('Pads blocks with additional records to reach 512 byte boundary (mixed).', () => {
    const hexStrMixed =
      ':020000040000FA\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expectedMixed =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n' +
      ':020000040003F7\n' +
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n';

    const resultMixed = uh.iHexToCustomFormatBlocks(hexStrMixed, 0x9903);

    expect(resultMixed).toEqual(expectedMixed);
    expect(resultMixed.length).toEqual(512);
  });

  it("There isn't an off-by-one error for a block that fits exactly", () => {
    const hexStr =
      ':020000040003F7\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':01F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n';
    const expected =
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':01F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':0000000BF5\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);

    expect(result).toEqual(expected);
    expect(result.length).toEqual(512);
  });

  it('One byte too large and the last record is moved to a new padded block', () => {
    const hexStr =
      ':020000040003F7\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':03F80000FDFFFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n';
    const expected =
      // First block with padding as last record doesn't fit
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':03F80000FDFFFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0B00000CFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n' +
      // Second block with the last record plus padding
      ':020000041000EA\n' +
      ':0400000A9901C0DEBA\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);

    expect(result).toEqual(expected);
    expect(result.length).toEqual(1024);
  });

  it('9901 and 9903 IDs left data records untouched', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expected9900 = [
      ':020000040000FA\n',
      ':0400000A9900C0DEBB\n',
      ':10F39000002070470E207047002803D00A490861FA\n',
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n',
      ':020000040003F7\n',
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':0400000BFFFFFFFFF5\n',
    ];
    const expected9901 = [...expected9900];
    expected9901[1] = ':0400000A9901C0DEBA\n';

    const result9900 = uh.iHexToCustomFormatBlocks(hexStr, 0x9900);
    const result9901 = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);

    expect(result9900).toEqual(expected9900.join(''));
    expect(result9900.length).toEqual(512);
    expect(result9901).toEqual(expected9901.join(''));
    expect(result9901.length).toEqual(512);
  });

  it('9903+ IDs change the data record type', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n' +
      ':00000001FF\n';
    const expected9903 = [
      ':020000040000FA\n',
      ':0400000A9903C0DEB8\n',
      ':10F3900D002070470E207047002803D00A490861ED\n',
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n',
      ':020000040003F7\n',
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n',
      ':0000000BF5\n',
      ':00000001FF\n',
    ];
    const expected9904 = [...expected9903];
    expected9904[1] = ':0400000A9904C0DEB7\n';
    const expected9910 = [...expected9903];
    expected9910[1] = ':0400000A9910C0DEAB\n';
    const expected0000 = [...expected9903];
    expected0000[1] = ':0400000A0000C0DE54\n';
    const expectedFFFF = [...expected9903];
    expectedFFFF[1] = ':0400000AFFFFC0DE56\n';

    const result9903 = uh.iHexToCustomFormatBlocks(hexStr, 0x9903);
    const result9904 = uh.iHexToCustomFormatBlocks(hexStr, 0x9904);
    const result9910 = uh.iHexToCustomFormatBlocks(hexStr, 0x9910);
    const result0000 = uh.iHexToCustomFormatBlocks(hexStr, 0);
    const resultFFFF = uh.iHexToCustomFormatBlocks(hexStr, 0xffff);

    expect(result9903).toEqual(expected9903.join(''));
    expect(result9904).toEqual(expected9904.join(''));
    expect(result9910).toEqual(expected9910.join(''));
    expect(result0000).toEqual(expected0000.join(''));
    expect(resultFFFF).toEqual(expectedFFFF.join(''));
  });

  it('It converts Extended Segmented Address records to Linear.', () => {
    const hexStr32 =
      ':020000020000FC\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':020000023000CC\n' +
      ':203F40006A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C6C\n';
    const expected32 =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':020000040003F7\n' +
      ':203F400D6A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C5F\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const result32 = uh.iHexToCustomFormatBlocks(hexStr32, 0x9903);

    expect(result32).toEqual(expected32);
    expect(result32.length).toEqual(512);
  });

  it('EoF record placed after an unpadded last block if it fits', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':109C40001ED0A180287A012805D00320A0715F488A\n' +
      ':109C5000EF22817F6FE70220F8E721462846029A2B\n' +
      ':020000040003F7\n' +
      ':1072400019D0134B9C421BD00123A54206D0180035\n' +
      ':00000001FF\n';
    const expected =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':109C400D1ED0A180287A012805D00320A0715F487D\n' +
      ':109C500DEF22817F6FE70220F8E721462846029A1E\n' +
      ':020000040003F7\n' +
      ':1072400D19D0134B9C421BD00123A54206D0180028\n' +
      ':0000000BF5\n' +
      ':00000001FF\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9903);

    expect(result).toEqual(expected);
  });

  it('EoF record placed in a new block if it does not fit', () => {
    const hexStr =
      ':020000040003F7\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':02F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':00000001FF\n';
    const expected =
      // First block
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':02F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':0000000BF5\n' +
      // Second block with only the EoF record
      ':020000041000EA\n' +
      ':0400000A9901C0DEBA\n' +
      ':0000000BF5\n' +
      ':00000001FF\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);

    expect(result).toEqual(expected);
  });

  it('Extended Linear Address record correctly parsed and used', () => {
    const hexStr =
      ':10558000002EEDD1E9E70020EAE7C0464302F0B57E\n' +
      ':1055900042005D0AC30F4802440A4800120E000E82\n' +
      ':1055A000C90FFF2A1FD0FF2822D0002A09D16E423E\n' +
      ':1055B0006E4100280FD1002C0DD10020002D09D004\n' +
      ':1055C00005E0002801D1002C01D08B4213D05842B5\n' +
      ':1055D00001231843F0BD002EF7D04842414101207D\n' +
      ':1055E00049420843F6E7002DDDD002204042F1E7B2\n' +
      ':1055F000002CDAD0F9E78242E9DC04DBA542E6D8E8\n' +
      ':105600000020A542E6D25842434101205B421843A4\n' +
      // This Extended Linear Address record falls inside the first block
      ':020000040002F8\n' +
      ':10561000E0E7C0464302F0B542004C005E0AC30F0B\n' +
      ':105620004802120E450A240EC90FFF2A17D0FF2C7C\n' +
      ':1056300019D0002A0BD170427041002C17D00028DD\n' +
      ':1056400007D048424141012049420843F0BD002CA7\n' +
      ':1056500013D08B4214D0584201231843F6E702209E\n' +
      ':10566000002EF3D1E3E70220002DEFD1E1E7002D7A\n' +
      ':10567000E5D10020002EE9D0EDE7002DE9D1EAE7E1\n' +
      ':10568000A242E8DC04DBAE42E5D80020AE42DDD227\n' +
      ':105690005842434101205B421843D7E7F0B55746D3\n' +
      ':1056A0004E4645464300E0B446028846760A1F0E41\n' +
      ':1056B000C40F002F47D0FF2F25D0002380259A4606\n' +
      ':06F80000FDFFFFFFFFFF0A\n' +
      // This Extended Linear Address record falls as the first block record
      ':020000040003F7\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':00000001FF\n';
    const expected =
      // First block starts at Extended Linear Address 0
      ':020000040000FA\n' +
      ':0400000A9901C0DEBA\n' +
      ':10558000002EEDD1E9E70020EAE7C0464302F0B57E\n' +
      ':1055900042005D0AC30F4802440A4800120E000E82\n' +
      ':1055A000C90FFF2A1FD0FF2822D0002A09D16E423E\n' +
      ':1055B0006E4100280FD1002C0DD10020002D09D004\n' +
      ':1055C00005E0002801D1002C01D08B4213D05842B5\n' +
      ':1055D00001231843F0BD002EF7D04842414101207D\n' +
      ':1055E00049420843F6E7002DDDD002204042F1E7B2\n' +
      ':1055F000002CDAD0F9E78242E9DC04DBA542E6D8E8\n' +
      ':105600000020A542E6D25842434101205B421843A4\n' +
      // The Extended Linear Address record inside the first block
      ':020000040002F8\n' +
      ':10561000E0E7C0464302F0B542004C005E0AC30F0B\n' +
      ':0400000BFFFFFFFFF5\n' +
      // Second block Extended Linear Address opening record is now 0x0003
      ':020000040002F8\n' +
      ':0400000A9901C0DEBA\n' +
      ':105620004802120E450A240EC90FFF2A17D0FF2C7C\n' +
      ':1056300019D0002A0BD170427041002C17D00028DD\n' +
      ':1056400007D048424141012049420843F0BD002CA7\n' +
      ':1056500013D08B4214D0584201231843F6E702209E\n' +
      ':10566000002EF3D1E3E70220002DEFD1E1E7002D7A\n' +
      ':10567000E5D10020002EE9D0EDE7002DE9D1EAE7E1\n' +
      ':10568000A242E8DC04DBAE42E5D80020AE42DDD227\n' +
      ':105690005842434101205B421843D7E7F0B55746D3\n' +
      ':1056A0004E4645464300E0B446028846760A1F0E41\n' +
      ':1056B000C40F002F47D0FF2F25D0002380259A4606\n' +
      ':06F80000FDFFFFFFFFFF0A\n' +
      ':0000000BF5\n' +
      // The next block starts with an Extended Linear Address record, so here
      // it makes sure it doesn't translate to two consecutive ELA records
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':0000000BF5\n' +
      ':00000001FF\n';

    const result = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);

    expect(result).toEqual(expected);
  });

  it('Empty Hex string produces an empty output', () => {
    const result = uh.iHexToCustomFormatBlocks('', 0x9903);

    expect(result).toEqual('');
  });

  // TODO: Add tests with 32 byte blocks
  // TODO: Add tests for Extended Segment Address converted to Linear
});

describe('Test iHexToCustomFormatSection()', () => {
  it('Pads blocks with additional records to reach 512 byte boundary (16)..', () => {
    const hexStr16 =
      ':020000040000FA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expected16 =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':10F2D00D61FF10BDB1F2030010B508461146FCF7F1\n' +
      ':10F2E00DC3FF10BDF8B5384C2078002837D0206901\n' +
      ':10F2F00D002807D00026E068002805D00025002E44\n' +
      ':10F3000D04D013E00126F6E70125F8E7684651DF42\n' +
      ':10F3100D052806D0002806D000221146FFF7BCFFB5\n' +
      ':10F3200D04E0012602E0216900988847002D12D1E2\n' +
      ':10F3300D608869460880A06861DF052806D000282E\n' +
      ':10F3400D06D000221146FFF7A7FF04E0012502E0D9\n' +
      ':10F3500DE168A0688847002ED8D0002DCFD0F8BD29\n' +
      ':10F3600D70B5002901D08C0701D0072070BD164C57\n' +
      ':10F3700D0125A16062801549636010DF0028F5D179\n' +
      ':08F3800D257016202EDF70BD73\n' +
      ':10F3900D002070470E207047002803D00A490861ED\n' +
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n' +
      ':020000040003F7\n' +
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0400000BFFFFFFFFF5\n';

    const result16 = uh.iHexToCustomFormatSection(hexStr16, 0x9903);

    expect(result16).toEqual(expected16);
    expect(result16.length).toEqual(1024);
  });

  it('Pads blocks with additional records to reach 512 byte boundary (32).', () => {
    const hexStr32 =
      ':020000040000FA\n' +
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':16F3600070B5002901D08C0701D0072070BD164C0125A160628055\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':020000040003F7\n' +
      ':203F40006A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C6C\n';
    const expected32 =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':16F3600D70B5002901D08C0701D0072070BD164C0125A160628048\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':020000040003F7\n' +
      ':203F400D6A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C5F\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const result32 = uh.iHexToCustomFormatSection(hexStr32, 0x9903);

    expect(result32).toEqual(expected32);
    expect(result32.length).toEqual(1024);
  });

  it('Pads blocks with additional records to reach 512 byte boundary (mixed).', () => {
    const hexStrMixed =
      ':020000040000FA\n' +
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':16F3600070B5002901D08C0701D0072070BD164C0125A160628055\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expectedMixed =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':16F3600D70B5002901D08C0701D0072070BD164C0125A160628048\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n' +
      ':020000040003F7\n' +
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n';

    const resultMixed = uh.iHexToCustomFormatSection(hexStrMixed, 0x9903);

    expect(resultMixed).toEqual(expectedMixed);
    expect(resultMixed.length).toEqual(1024);
  });

  it('No off-by-one error when padding blocks with an empty block end record', () => {
    const hexStr =
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':20F3600070B5002901D08C0701D0072070BD164C0125A16062801549636010DF0028F5D14D\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':12F3C00010BDFFF78FFF10BDD8280020D9F203000346E6\n' +
      ':02F3E00010C952';
    const expected =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':20F3600D70B5002901D08C0701D0072070BD164C0125A16062801549636010DF0028F5D140\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':12F3C00D10BDFFF78FFF10BDD8280020D9F203000346D9\n' +
      ':02F3E00D10C945\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const result = uh.iHexToCustomFormatSection(hexStr, 0x9903);

    expect(result).toEqual(expected);
    expect(result.length).toEqual(1024);
  });

  it("There isn't an off-by-one error for a block that fits exactly", () => {
    const hexStr16 =
      ':020000040003F7\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':01F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n';
    const expected16 =
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':01F80000FDFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':0000000BF5\n';

    const result16 = uh.iHexToCustomFormatSection(hexStr16, 0x9901);

    expect(result16).toEqual(expected16);
    expect(result16.length).toEqual(1024);
  });

  it('One byte too large and the last record is moved to a new padded block', () => {
    const hexStr =
      ':020000040003F7\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':03F80000FDFFFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n';
    const expected =
      // First block with padding as last record doesn't fit
      ':020000040003F7\n' +
      ':0400000A9901C0DEBA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':108D800003F09F928E203D20496D6167652E444916\n' +
      ':108D9000414D4F4E440AF09F8FA0203D20496D6108\n' +
      ':108DA00067652E484F5553450AFFFFFFFFFFFFFF42\n' +
      ':108DB000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC3\n' +
      ':108DC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB3\n' +
      ':108DD000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA3\n' +
      ':108DE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF93\n' +
      ':108DF000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF83\n' +
      ':03F80000FDFFFF0A\n' +
      ':020000041000EA\n' +
      ':1010C0007CB0EE17FFFFFFFF0A0000000000E30006\n' +
      ':0C10D000FFFFFFFF2D6D0300000000007B\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0D00000BFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n';

    const result = uh.iHexToCustomFormatSection(hexStr, 0x9901);

    expect(result).toEqual(expected);
    expect(result.length).toEqual(1536);
  });

  it('9901 and 9903 IDs left data records untouched', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expected9900 = [
      ':020000040000FA\n',
      ':0400000A9900C0DEBB\n',
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n',
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n',
      ':10F2F000002807D00026E068002805D00025002E51\n',
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n',
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n',
      ':10F3200004E0012602E0216900988847002D12D1EF\n',
      ':10F33000608869460880A06861DF052806D000283B\n',
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n',
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n',
      ':10F3600070B5002901D08C0701D0072070BD164C64\n',
      ':10F370000125A16062801549636010DF0028F5D186\n',
      ':08F38000257016202EDF70BD80\n',
      ':10F39000002070470E207047002803D00A490861FA\n',
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n',
      ':020000040003F7\n',
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':0400000BFFFFFFFFF5\n',
    ];
    const expected9901 = [...expected9900];
    expected9901[1] = ':0400000A9901C0DEBA\n';

    const result9900 = uh.iHexToCustomFormatSection(hexStr, 0x9900);
    const result9901 = uh.iHexToCustomFormatSection(hexStr, 0x9901);

    expect(result9900).toEqual(expected9900.join(''));
    expect(result9900.length).toEqual(1024);
    expect(result9901).toEqual(expected9901.join(''));
    expect(result9901.length).toEqual(1024);
  });

  it('9903+ IDs change the data record type', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':10F39000002070470E207047002803D00A490861FA\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n' +
      ':00000001FF\n';
    const expected9903 = [
      ':020000040000FA\n',
      ':0400000A9903C0DEB8\n',
      ':10F2D00D61FF10BDB1F2030010B508461146FCF7F1\n',
      ':10F2E00DC3FF10BDF8B5384C2078002837D0206901\n',
      ':10F2F00D002807D00026E068002805D00025002E44\n',
      ':10F3000D04D013E00126F6E70125F8E7684651DF42\n',
      ':10F3100D052806D0002806D000221146FFF7BCFFB5\n',
      ':10F3200D04E0012602E0216900988847002D12D1E2\n',
      ':10F3300D608869460880A06861DF052806D000282E\n',
      ':10F3400D06D000221146FFF7A7FF04E0012502E0D9\n',
      ':10F3500DE168A0688847002ED8D0002DCFD0F8BD29\n',
      ':10F3600D70B5002901D08C0701D0072070BD164C57\n',
      ':10F3700D0125A16062801549636010DF0028F5D179\n',
      ':08F3800D257016202EDF70BD73\n',
      ':10F3900D002070470E207047002803D00A490861ED\n',
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n',
      ':020000040003F7\n',
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n',
      ':0400000BFFFFFFFFF5\n',
      ':00000001FF\n',
    ];
    const expected9904 = [...expected9903];
    expected9904[1] = ':0400000A9904C0DEB7\n';
    const expected9910 = [...expected9903];
    expected9910[1] = ':0400000A9910C0DEAB\n';
    const expected0000 = [...expected9903];
    expected0000[1] = ':0400000A0000C0DE54\n';
    const expectedFFFF = [...expected9903];
    expectedFFFF[1] = ':0400000AFFFFC0DE56\n';

    const result9903 = uh.iHexToCustomFormatSection(hexStr, 0x9903);
    const result9904 = uh.iHexToCustomFormatSection(hexStr, 0x9904);
    const result9910 = uh.iHexToCustomFormatSection(hexStr, 0x9910);
    const result0000 = uh.iHexToCustomFormatSection(hexStr, 0);
    const resultFFFF = uh.iHexToCustomFormatSection(hexStr, 0xffff);

    expect(result9903).toEqual(expected9903.join(''));
    expect(result9904).toEqual(expected9904.join(''));
    expect(result9910).toEqual(expected9910.join(''));
    expect(result0000).toEqual(expected0000.join(''));
    expect(resultFFFF).toEqual(expectedFFFF.join(''));
  });

  it('It converts Extended Segmented Address records to Linear.', () => {
    const hexStr32 =
      ':020000020000FC\n' +
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':16F3600070B5002901D08C0701D0072070BD164C0125A160628055\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':020000023000CC\n' +
      ':203F40006A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C6C\n';
    const expected32 =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':16F3600D70B5002901D08C0701D0072070BD164C0125A160628048\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':020000040003F7\n' +
      ':203F400D6A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C5F\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const result32 = uh.iHexToCustomFormatSection(hexStr32, 0x9903);

    expect(result32).toEqual(expected32);
    expect(result32.length).toEqual(1024);
  });

  it('EoF record placed after a fully padded section', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10F2D00061FF10BDB1F2030010B508461146FCF7FE\n' +
      ':10F2E000C3FF10BDF8B5384C2078002837D020690E\n' +
      ':10F2F000002807D00026E068002805D00025002E51\n' +
      ':10F3000004D013E00126F6E70125F8E7684651DF4F\n' +
      ':10F31000052806D0002806D000221146FFF7BCFFC2\n' +
      ':10F3200004E0012602E0216900988847002D12D1EF\n' +
      ':10F33000608869460880A06861DF052806D000283B\n' +
      ':10F3400006D000221146FFF7A7FF04E0012502E0E6\n' +
      ':10F35000E168A0688847002ED8D0002DCFD0F8BD36\n' +
      ':10F3600070B5002901D08C0701D0072070BD164C64\n' +
      ':10F370000125A16062801549636010DF0028F5D186\n' +
      ':08F38000257016202EDF70BD80\n' +
      ':109C40001ED0A180287A012805D00320A0715F488A\n' +
      ':109C5000EF22817F6FE70220F8E721462846029A2B\n' +
      ':020000040003F7\n' +
      ':1072400019D0134B9C421BD00123A54206D0180035\n' +
      ':00000001FF\n';
    const expected =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':10F2D00D61FF10BDB1F2030010B508461146FCF7F1\n' +
      ':10F2E00DC3FF10BDF8B5384C2078002837D0206901\n' +
      ':10F2F00D002807D00026E068002805D00025002E44\n' +
      ':10F3000D04D013E00126F6E70125F8E7684651DF42\n' +
      ':10F3100D052806D0002806D000221146FFF7BCFFB5\n' +
      ':10F3200D04E0012602E0216900988847002D12D1E2\n' +
      ':10F3300D608869460880A06861DF052806D000282E\n' +
      ':10F3400D06D000221146FFF7A7FF04E0012502E0D9\n' +
      ':10F3500DE168A0688847002ED8D0002DCFD0F8BD29\n' +
      ':10F3600D70B5002901D08C0701D0072070BD164C57\n' +
      ':10F3700D0125A16062801549636010DF0028F5D179\n' +
      ':08F3800D257016202EDF70BD73\n' +
      ':109C400D1ED0A180287A012805D00320A0715F487D\n' +
      ':109C500DEF22817F6FE70220F8E721462846029A1E\n' +
      ':020000040003F7\n' +
      ':1072400D19D0134B9C421BD00123A54206D0180028\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0400000BFFFFFFFFF5\n' +
      ':00000001FF\n';

    const result = uh.iHexToCustomFormatSection(hexStr, 0x9903);

    expect(result).toEqual(expected);
  });

  it('Extended Linear Address record correctly parsed and used', () => {
    const hexStrWithout =
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':16F3600070B5002901D08C0701D0072070BD164C0125A160628055\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':20F3A000002070470E20704710B507484068002807D08047002803D000221146FFF76CFF3A\n' +
      ':020000040003F7\n' +
      ':203F40006A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C6C\n';
    const hexStrWith = ':020000040000FA\n' + hexStrWithout;
    const expectedBoth =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':16F3600D70B5002901D08C0701D0072070BD164C0125A160628048\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':20F3A00D002070470E20704710B507484068002807D08047002803D000221146FFF76CFF2D\n' +
      ':020000040003F7\n' +
      ':203F400D6A4623C210A82A46FF21808A0C9B02F0F1F9002802D0FFF7A4F8EFE66846007C5F\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':0000000BF5\n';

    const resultWithout = uh.iHexToCustomFormatSection(hexStrWithout, 0x9903);
    const resultWith = uh.iHexToCustomFormatSection(hexStrWith, 0x9903);

    expect(resultWithout).toEqual(expectedBoth);
    expect(resultWith).toEqual(expectedBoth);
    expect(resultWith.length).toEqual(1024);
  });

  it('Extended Segment Address records get converted to Linear', () => {
    const hexStrMixed =
      ':020000020000FC\n' +
      ':20F2A000C860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF6F\n' +
      ':20F2C00000F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7C3\n' +
      ':20F2E000C3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E41\n' +
      ':20F3000004D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF14\n' +
      ':020000022000DC\n' +
      ':20F3200004E0012602E0216900988847002D12D1608869460880A06861DF052806D000284D\n' +
      ':20F3400006D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD5F\n' +
      ':0EF3600070B5002901D08C0701D0072070BDC8\n' +
      ':20F38000257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908617B\n' +
      ':10F3E00010C9121FA342F8D018BA21BA884201D915\n' +
      ':020000040003F7\n' +
      ':103F40006A4623C210A82A46FF21808A0C9B02F0F1\n';
    const expectedMixed =
      ':020000040000FA\n' +
      ':0400000A9903C0DEB8\n' +
      ':20F2A00DC860BFF34F8FFEE70400FA0500ED00E010B5002904D0002211461046FFF7ECFF62\n' +
      ':20F2C00D00F010F810BD10B50021024A0846FFF761FF10BDB1F2030010B508461146FCF7B6\n' +
      ':20F2E00DC3FF10BDF8B5384C2078002837D02069002807D00026E068002805D00025002E34\n' +
      ':20F3000D04D013E00126F6E70125F8E7684651DF052806D0002806D000221146FFF7BCFF07\n' +
      ':020000040002F8\n' +
      ':20F3200D04E0012602E0216900988847002D12D1608869460880A06861DF052806D0002840\n' +
      ':20F3400D06D000221146FFF7A7FF04E0012502E0E168A0688847002ED8D0002DCFD0F8BD52\n' +
      ':0EF3600D70B5002901D08C0701D0072070BDBB\n' +
      ':20F3800D257016202EDF70BD002803D00E49C860002070470E207047002803D00A4908616E\n' +
      ':10F3E00D10C9121FA342F8D018BA21BA884201D908\n' +
      ':020000040003F7\n' +
      ':103F400D6A4623C210A82A46FF21808A0C9B02F0E4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':2000000CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4\n' +
      ':1C00000BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5\n';

    const result = uh.iHexToCustomFormatSection(hexStrMixed, 0x9903);

    expect(result).toEqual(expectedMixed);
  });

  it('Empty Hex string produces an empty output', () => {
    const result = uh.iHexToCustomFormatSection('', 0x9903);

    expect(result).toEqual('');
  });
});

describe('Test createUniversalHex()', () => {
  it('Empty input equals empty output', () => {
    const result = uh.createUniversalHex([]);

    expect(result).toEqual('');
  });

  it('Intel Hex without EoF record ends in one', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n';
    const normalHexWin = normalHex.replace(/\n/g, '\r\n');

    const resultSingle = uh.createUniversalHex([
      { hex: normalHexWin, boardId: 0x9903 },
    ]);
    const resultDouble = uh.createUniversalHex([
      { hex: normalHexWin, boardId: 0x9900 },
      { hex: normalHex, boardId: 0x9903 },
    ]);

    expect(resultSingle.endsWith(':00000001FF\n')).toBeTruthy();
    expect(resultDouble.endsWith(':00000001FF\n')).toBeTruthy();
  });

  it('Intel Hex with EoF in the middle throws errors', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n';
    const normalHexEof12 = normalHex.replace(
      ':10008000678E0100678E0100678E0100678E010098\n',
      ':10008000678E0100678E0100678E0100678E010098\n' + ':00000001FF\n'
    );
    const normalHexEof10 = normalHex.replace(
      ':1000600069E80000D59A0100D9930100678E01006C\n',
      ':1000600069E80000D59A0100D9930100678E01006C\n' + ':00000001FF\n'
    );

    const failFirstBlocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHexEof10, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    const failFirstSections = () => {
      uh.createUniversalHex([
        { hex: normalHexEof10, boardId: 0x9900 },
        { hex: normalHex, boardId: 0x9903 },
      ]);
    };
    const failSecondBlocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: normalHexEof12, boardId: 0x9903 },
        ],
        true
      );
    };
    const failSecondSections = () => {
      uh.createUniversalHex([
        { hex: normalHex, boardId: 0x9900 },
        { hex: normalHexEof12, boardId: 0x9903 },
      ]);
    };

    expect(failFirstBlocks).toThrow(
      'EoF record found at record 9 of 12 in Board ID 39168 hex'
    );
    expect(failFirstSections).toThrow(
      'EoF record found at record 9 of 12 in Board ID 39168 hex'
    );
    expect(failSecondBlocks).toThrow(
      'EoF record found at record 11 of 12 in Board ID 39171 hex'
    );
    expect(failSecondSections).toThrow(
      'EoF record found at record 11 of 12 in Board ID 39171 hex'
    );
  });

  it('Universal Hex input throws errors', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n' +
      ':00000001FF\n';
    const universalHex =
      ':020000040000FA\n' +
      ':0400000A9900C0DEBB\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n' +
      ':00000001FF\n';

    const failFirstBlocks = () => {
      uh.createUniversalHex(
        [
          { hex: universalHex, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    const failFirstSections = () => {
      uh.createUniversalHex(
        [
          { hex: universalHex, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        false
      );
    };
    const failSecondBlocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: universalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    const failSecondSections = () => {
      uh.createUniversalHex([
        { hex: normalHex, boardId: 0x9900 },
        { hex: universalHex, boardId: 0x9903 },
      ]);
    };

    expect(failFirstBlocks).toThrow(
      'Board ID 39168 Hex is already a Universal Hex'
    );
    expect(failFirstSections).toThrow(
      'Board ID 39168 Hex is already a Universal Hex'
    );
    expect(failSecondBlocks).toThrow(
      'Board ID 39171 Hex is already a Universal Hex'
    );
    expect(failSecondSections).toThrow(
      'Board ID 39171 Hex is already a Universal Hex'
    );
  });

  it('MakeCode v1 and v2 Hex (micro:bit V1) throws custom error message', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n' +
      ':00000001FF\n';
    const microbitV1MakecodeV0 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':020000042000DA\n' +
      ':1000000041140E2FB82FA2BB9A005F02000000001F\n' +
      ':100010007B22636F6D7072657373696F6E223A2213\n' +
      ':00000001FF\n' +
      '\n';
    const microbitV1MakecodeV1 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':00000001FF\n' +
      '\n' +
      ':020000042000DA\n' +
      ':1000000041140E2FB82FA2BB9A005F02000000001F\n' +
      ':100010007B22636F6D7072657373696F6E223A2213\n' +
      '\n';
    const microbitV1MakecodeV2 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':00000001FF\n' +
      '\n' +
      '\n' +
      '\n' +
      ':1000000E41140E2FB82FA2BB9A006E020000000002\n' +
      ':1000100E7B22636F6D7072657373696F6E223A2205\n' +
      '\n' +
      '\n';

    // @ts-expect-error
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const failFirstV0Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV0, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    const failFirstV1Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV1, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    const failFirstV2Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV2, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        true
      );
    };
    // @ts-expect-error
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const failFirstV0Sections = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV0, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        false
      );
    };
    const failFirstV1Sections = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV1, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        false
      );
    };
    const failFirstV2Sections = () => {
      uh.createUniversalHex(
        [
          { hex: microbitV1MakecodeV2, boardId: 0x9900 },
          { hex: normalHex, boardId: 0x9903 },
        ],
        false
      );
    };
    // @ts-expect-error
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const failSecondV0Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV0, boardId: 0x9903 },
        ],
        true
      );
    };
    const failSecondV1Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV1, boardId: 0x9903 },
        ],
        true
      );
    };
    const failSecondV2Blocks = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV2, boardId: 0x9903 },
        ],
        true
      );
    };
    // @ts-expect-error
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const failSecondV0Sections = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV0, boardId: 0x9903 },
        ],
        false
      );
    };
    const failSecondV1Sections = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV1, boardId: 0x9903 },
        ],
        false
      );
    };
    const failSecondV2Sections = () => {
      uh.createUniversalHex(
        [
          { hex: normalHex, boardId: 0x9900 },
          { hex: microbitV1MakecodeV2, boardId: 0x9903 },
        ],
        false
      );
    };

    // To avoid performing too many checks that'll slow down createUniversalHex
    // the V0 hex files will be able to be detected, and the MakeCode hex check
    // is only performed when an E0F record is not at the end of the hex file
    // expect(failFirstV0Blocks).toThrow(
    //  'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex'
    // );
    expect(failFirstV1Blocks).toThrow(
      'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex'
    );
    expect(failFirstV2Blocks).toThrow(
      'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
    // expect(failFirstV0Sections).toThrow(
    //  'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    // );
    expect(failFirstV1Sections).toThrow(
      'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
    expect(failFirstV2Sections).toThrow(
      'Board ID 39168 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
    // expect(failSecondV0Blocks).toThrow(
    //  'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex'
    // );
    expect(failSecondV1Blocks).toThrow(
      'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex'
    );
    expect(failSecondV2Blocks).toThrow(
      'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
    // expect(failSecondV0Sections).toThrow(
    //  'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    // );
    expect(failSecondV1Sections).toThrow(
      'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
    expect(failSecondV2Sections).toThrow(
      'Board ID 39171 Hex is from MakeCode, import this hex into the MakeCode editor to create a Universal Hex.'
    );
  });
});

describe('Test isUniversalHex()', () => {
  it('Detects a MakeCode V0 hex for micro:bit V1.', () => {
    const microbitV1MakecodeV0 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':020000042000DA\n' +
      ':1000000041140E2FB82FA2BB9A005F02000000001F\n' +
      ':100010007B22636F6D7072657373696F6E223A2213\n' +
      ':00000001FF\n' +
      '\n';

    const result = uh.isMakeCodeForV1Hex(microbitV1MakecodeV0);

    expect(result).toBeTruthy();
  });

  it('Detects a MakeCode V1 hex for micro:bit V1.', () => {
    const microbitV1MakecodeV1 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':00000001FF\n' +
      '\n' +
      ':020000042000DA\n' +
      ':1000000041140E2FB82FA2BB9A005F02000000001F\n' +
      ':100010007B22636F6D7072657373696F6E223A2213\n' +
      '\n';

    const result = uh.isMakeCodeForV1Hex(microbitV1MakecodeV1);

    expect(result).toBeTruthy();
  });

  it('Detects a MakeCode V2/V3 hex for micro:bit V1.', () => {
    const microbitV1MakecodeV2 =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':00000001FF\n' +
      '\n' +
      '\n' +
      '\n' +
      ':1000000E41140E2FB82FA2BB9A006E020000000002\n' +
      ':1000100E7B22636F6D7072657373696F6E223A2205\n' +
      '\n' +
      '\n';

    const result = uh.isMakeCodeForV1Hex(microbitV1MakecodeV2);

    expect(result).toBeTruthy();
  });

  it('A normal non MakeCode Intel Hex is not a false positive.', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n' +
      ':00000001FF\n';

    const result = uh.isMakeCodeForV1Hex(normalHex);

    expect(result).toBeFalsy();
  });
});

describe('Test isUniversalHex()', () => {
  it('Detects a Universal Intel Hex.', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':0400000A9900C0DEBB\n' +
      ':1000000000400020218E01005D8E01005F8E010006\n' +
      ':1000100000000000000000000000000000000000E0\n' +
      ':10002000000000000000000000000000618E0100E0\n' +
      ':100030000000000000000000638E0100658E0100DA\n' +
      ':10004000678E01005D3D000065950100678E01002F\n' +
      ':10005000678E010000000000218F0100678E010003\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\n' +
      ':10008000678E0100678E0100678E0100678E010098\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\n' +
      ':00000001FF\n';

    const result = uh.isUniversalHex(normalHex);

    expect(result).toBeTruthy();
  });

  it('Detects a Universal Intel Hex with Windows line endings.', () => {
    const normalHex =
      ':020000040000FA\r\n' +
      ':0400000A9900C0DEBB\r\n' +
      ':1000000000400020218E01005D8E01005F8E010006\r\n' +
      ':1000100000000000000000000000000000000000E0\r\n' +
      ':10002000000000000000000000000000618E0100E0\r\n' +
      ':100030000000000000000000638E0100658E0100DA\r\n' +
      ':10004000678E01005D3D000065950100678E01002F\r\n' +
      ':10005000678E010000000000218F0100678E010003\r\n' +
      ':1000600069E80000D59A0100D9930100678E01006C\r\n' +
      ':10007000678E0100678E0100678E0100678E0100A8\r\n' +
      ':10008000678E0100678E0100678E0100678E010098\r\n' +
      ':10009000678E01000D8A0100D98A0100A5E90000E0\r\n' +
      ':0C00000BFFFFFFFFFFFFFFFFFFFFFFFFF5\r\n' +
      ':00000001FF\r\n';

    const result = uh.isUniversalHex(normalHex);

    expect(result).toBeTruthy();
  });

  it('Detects an empty string as false', () => {
    expect(uh.isUniversalHex('')).toBeFalsy();
  });

  it('Detects a normal Intel Hex as false.', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':10558000002EEDD1E9E70020EAE7C0464302F0B57E\n' +
      ':1055900042005D0AC30F4802440A4800120E000E82\n' +
      ':00000001FF\n';

    const result = uh.isUniversalHex(normalHex);

    expect(result).toBeFalsy();
  });

  it('Detects a random string as false.', () => {
    const normalHex = 'This is just a random string';

    const result = uh.isUniversalHex(normalHex);

    expect(result).toBeFalsy();
  });

  it('Returns false when failing to find the second record.', () => {
    const normalHex = ':02000004\nThis is just a random string, nor a record.';

    const result = uh.isUniversalHex(normalHex);

    expect(result).toBeFalsy();
  });
});

describe('Separate a Universal Hex', () => {
  it('Throws an error on empty input', () => {
    expect(() => {
      uh.separateUniversalHex('');
    }).toThrow('Empty');
  });

  it('A normal hex cannot be separated.', () => {
    const normalHex =
      ':020000040000FA\n' +
      ':10558000002EEDD1E9E70020EAE7C0464302F0B57E\n' +
      ':1055900042005D0AC30F4802440A4800120E000E82\n' +
      ':00000001FF\n';

    expect(() => {
      uh.separateUniversalHex(normalHex);
    }).toThrow('format invalid');
  });

  it('Throws error on malformed BlockStart.', () => {
    const simpleBlock =
      ':020000040003F7\n' +
      ':0400000A9901BA\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':0000000BF5\n' +
      ':00000001FF\n';

    expect(() => {
      uh.separateUniversalHex(simpleBlock);
    }).toThrow('Block Start record invalid: :0400000A9901BA');
  });

  it('Ensure all hexes have EoF records.', () => {
    const firstBlock =
      ':020000040002F8\n' +
      ':0400000A9901C0DEBA\n' +
      ':105620004802120E450A240EC90FFF2A17D0FF2C7C\n' +
      ':1056300019D0002A0BD170427041002C17D00028DD\n' +
      ':1056400007D048424141012049420843F0BD002CA7\n' +
      ':1056500013D08B4214D0584201231843F6E702209E\n' +
      ':10566000002EF3D1E3E70220002DEFD1E1E7002D7A\n' +
      ':10567000E5D10020002EE9D0EDE7002DE9D1EAE7E1\n' +
      ':10568000A242E8DC04DBAE42E5D80020AE42DDD227\n' +
      ':105690005842434101205B421843D7E7F0B55746D3\n' +
      ':1056A0004E4645464300E0B446028846760A1F0E41\n' +
      ':1056B000C40F002F47D0FF2F25D0002380259A4606\n' +
      ':06F80000FDFFFFFFFFFF0A\n' +
      ':0000000BF5\n';
    const firstHex =
      ':020000040002F8\n' +
      ':105620004802120E450A240EC90FFF2A17D0FF2C7C\n' +
      ':1056300019D0002A0BD170427041002C17D00028DD\n' +
      ':1056400007D048424141012049420843F0BD002CA7\n' +
      ':1056500013D08B4214D0584201231843F6E702209E\n' +
      ':10566000002EF3D1E3E70220002DEFD1E1E7002D7A\n' +
      ':10567000E5D10020002EE9D0EDE7002DE9D1EAE7E1\n' +
      ':10568000A242E8DC04DBAE42E5D80020AE42DDD227\n' +
      ':105690005842434101205B421843D7E7F0B55746D3\n' +
      ':1056A0004E4645464300E0B446028846760A1F0E41\n' +
      ':1056B000C40F002F47D0FF2F25D0002380259A4606\n' +
      ':06F80000FDFFFFFFFFFF0A\n' +
      ':00000001FF\n';
    const secondBlock =
      ':020000040003F7\n' +
      ':0400000A9903C0DEB8\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':0000000BF5\n' +
      ':00000001FF\n';
    const secondHex =
      ':020000040003F7\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':00000001FF\n';

    const result = uh.separateUniversalHex(firstBlock + secondBlock);
    expect(result[0].boardId).toEqual(0x9901);
    expect(result[0].hex).toEqual(firstHex);
    expect(result[1].boardId).toEqual(0x9903);
    expect(result[1].hex).toEqual(secondHex);
  });

  it('Separate a Blocks Universal hex file', () => {
    const result = uh.separateUniversalHex(hexCombinedBlocks);
    // fs.writeFileSync(
    //  './src/__tests__/hex-files/test-separate-0.hex',
    //  result[0].hex
    // );
    // fs.writeFileSync(
    //  './src/__tests__/hex-files/test-separate-1.hex',
    //  result[1].hex
    // );

    expect(result[0].boardId).toEqual(0x9901);
    expect(result[0].hex).toEqual(hex116);
    expect(result[1].boardId).toEqual(0x9903);
    // 2-ghost-music.hex does not open with the optional :020000040000FA record
    expect(result[1].hex).toEqual(':020000040000FA\n' + hex216);
  });

  it('Separate a Section Universal hex file', () => {
    const result = uh.separateUniversalHex(hexCombinedSections);
    // fs.writeFileSync(
    //  './src/__tests__/hex-files/test-separate-section-0.hex',
    //  result[0].hex
    // );
    // fs.writeFileSync(
    //  './src/__tests__/hex-files/test-separate-section-1.hex',
    //  result[1].hex
    // );

    expect(result[0].boardId).toEqual(0x9901);
    expect(result[0].hex).toEqual(hex132);
    expect(result[1].boardId).toEqual(0x9903);
    // 2-ghost-music.hex does not open with the optional :020000040000FA record
    // And it has an Start Linear Address record at the end
    expect(result[1].hex).toEqual(
      ':020000040000FA\n' + hex232.replace(':040000050000FA55A8\n', '')
    );
  });
});

describe('Loopback Intel Hex to Universal Hex', () => {
  it('From a small sample', () => {
    const hexStr =
      ':020000040000FA\n' +
      ':10558000002EEDD1E9E70020EAE7C0464302F0B57E\n' +
      ':1055900042005D0AC30F4802440A4800120E000E82\n' +
      ':1055A000C90FFF2A1FD0FF2822D0002A09D16E423E\n' +
      ':1055B0006E4100280FD1002C0DD10020002D09D004\n' +
      ':1055C00005E0002801D1002C01D08B4213D05842B5\n' +
      ':1055D00001231843F0BD002EF7D04842414101207D\n' +
      ':1055E00049420843F6E7002DDDD002204042F1E7B2\n' +
      ':1055F000002CDAD0F9E78242E9DC04DBA542E6D8E8\n' +
      ':105600000020A542E6D25842434101205B421843A4\n' +
      // This Extended Linear Address record falls inside the first block
      ':020000040002F8\n' +
      ':10561000E0E7C0464302F0B542004C005E0AC30F0B\n' +
      ':105620004802120E450A240EC90FFF2A17D0FF2C7C\n' +
      ':1056300019D0002A0BD170427041002C17D00028DD\n' +
      ':1056400007D048424141012049420843F0BD002CA7\n' +
      ':1056500013D08B4214D0584201231843F6E702209E\n' +
      ':10566000002EF3D1E3E70220002DEFD1E1E7002D7A\n' +
      ':10567000E5D10020002EE9D0EDE7002DE9D1EAE7E1\n' +
      ':10568000A242E8DC04DBAE42E5D80020AE42DDD227\n' +
      ':105690005842434101205B421843D7E7F0B55746D3\n' +
      ':1056A0004E4645464300E0B446028846760A1F0E41\n' +
      ':1056B000C40F002F47D0FF2F25D0002380259A4606\n' +
      ':06F80000FDFFFFFFFFFF0A\n' +
      // This Extended Linear Address record falls as the first block record
      ':020000040003F7\n' +
      ':1056C0009946F600ED042E437F3F434642465D0275\n' +
      ':1056D000D20F5B006D0A1B0E904640D0FF2B39D0D5\n' +
      ':1056E00080220020ED00D20415437F3BFB18424688\n' +
      ':1056F0005746591C62408C4607430F2F5CD86F49B0\n' +
      ':00000001FF\n';
    const hexStrWin = hexStr.replace(/\n/g, '\r\n');

    const universalHexBlocks = uh.iHexToCustomFormatBlocks(hexStr, 0x9901);
    const universalHexBlocksWin = uh.iHexToCustomFormatBlocks(
      hexStrWin,
      0x9901
    );
    const universalHexSection = uh.iHexToCustomFormatSection(hexStr, 0x9901);
    const universalHexSectionWin = uh.iHexToCustomFormatSection(
      hexStrWin,
      0x9901
    );
    const universalHexMultipleDefault = uh.createUniversalHex([
      { hex: hexStr, boardId: 0x9901 },
      { hex: hexStrWin, boardId: 0x9902 },
      { hex: hexStr, boardId: 0x9903 },
      { hex: hexStrWin, boardId: 0x9904 },
    ]);
    const universalHexMultipleBlocks = uh.createUniversalHex(
      [
        { hex: hexStr, boardId: 0x9901 },
        { hex: hexStrWin, boardId: 0x9902 },
        { hex: hexStr, boardId: 0x9903 },
        { hex: hexStrWin, boardId: 0x9904 },
      ],
      true
    );

    const resultBlocks = uh.separateUniversalHex(universalHexBlocks);
    const resultBlocksWin = uh.separateUniversalHex(universalHexBlocksWin);
    const resultSection = uh.separateUniversalHex(universalHexSection);
    const resultSectionWin = uh.separateUniversalHex(universalHexSectionWin);
    const resultMultipleDefault = uh.separateUniversalHex(
      universalHexMultipleDefault
    );
    const resultMultipleBlocks = uh.separateUniversalHex(
      universalHexMultipleBlocks
    );

    expect(resultBlocks[0].hex).toEqual(hexStr);
    expect(resultBlocksWin[0].hex).toEqual(hexStr);
    expect(resultSection[0].hex).toEqual(hexStr);
    expect(resultSectionWin[0].hex).toEqual(hexStr);
    expect(resultMultipleDefault[0].hex).toEqual(hexStr);
    expect(resultMultipleDefault[1].hex).toEqual(hexStr);
    expect(resultMultipleDefault[2].hex).toEqual(hexStr);
    expect(resultMultipleDefault[3].hex).toEqual(hexStr);
    expect(resultMultipleBlocks[0].hex).toEqual(hexStr);
    expect(resultMultipleBlocks[1].hex).toEqual(hexStr);
    expect(resultMultipleBlocks[2].hex).toEqual(hexStr);
    expect(resultMultipleBlocks[3].hex).toEqual(hexStr);
  });

  it('From full MakeCode files Blocks', () => {
    const universalHexBlocks = uh.createUniversalHex(
      [
        {
          hex: hex116,
          boardId: 0x9901,
        },
        {
          hex: hex216,
          boardId: 0x9903,
        },
      ],
      true
    );

    const separatedBlocks = uh.separateUniversalHex(universalHexBlocks);

    // TODO: This test fails because the last block for a section is not padded
    // expect(universalHexBlocks).toEqual(hexCombinedBlocks);
    expect(separatedBlocks[0].boardId).toEqual(0x9901);
    expect(separatedBlocks[0].hex).toEqual(hex116);
    expect(separatedBlocks[1].boardId).toEqual(0x9903);
    // 2-ghost-music.hex does not open with the optional :020000040000FA record
    expect(separatedBlocks[1].hex).toEqual(':020000040000FA\n' + hex216);
  });

  it('From full MakeCode files Sections', () => {
    const universalHexSections = uh.createUniversalHex([
      {
        hex: hex132,
        boardId: 0x9901,
      },
      {
        hex: hex232,
        boardId: 0x9903,
      },
    ]);

    const separatedSections = uh.separateUniversalHex(universalHexSections);

    expect(universalHexSections).toEqual(hexCombinedSections);
    expect(separatedSections[0].boardId).toEqual(0x9901);
    expect(separatedSections[0].hex).toEqual(hex132);
    expect(separatedSections[1].boardId).toEqual(0x9903);
    // 2-ghost-music.hex does not open with the optional :020000040000FA record
    // And it has an Start Linear Address record at the end
    expect(separatedSections[1].hex).toEqual(
      ':020000040000FA\n' + hex232.replace(':040000050000FA55A8\n', '')
    );
  });
});
